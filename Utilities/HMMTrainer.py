# The features found from training videos which had been saved in csv file is used by this program. 
# The feature set from this csv file is used for training of HMM
# The input gestures feature set file is specified using variable IP_fName
# The output directory of HMMs is specified using variable OPDir


import numpy as np
import timeit
from hmmlearn import hmm
from sklearn.externals import joblib


# IP_fName = './SampleFeatureSetFiles/silatra_gestures_pregenerated_sample.csv'
IP_fName = './TempFeatureSetFiles/silatra_gestures_temp.csv'
OPDir = './TempHMMModels/GestureHMMs'

np.random.seed(42)

no_of_its = 100

Models = {
    'Good Afternoon': hmm.MultinomialHMM(n_components = 3,init_params='e',n_iter=no_of_its),
    'Good Morning': hmm.MultinomialHMM(n_components = 5,init_params='e',n_iter=no_of_its),
    'Good Night': hmm.MultinomialHMM(n_components = 5,init_params='e',n_iter=no_of_its),
    'After':hmm.MultinomialHMM(n_components = 3,init_params='e',n_iter=no_of_its),
    'All The Best':hmm.MultinomialHMM(n_components = 2,init_params='e',n_iter=no_of_its),
    'Apple':hmm.MultinomialHMM(n_components = 3,init_params='e',n_iter=no_of_its),
    'I Am Sorry':hmm.MultinomialHMM(n_components = 3,init_params='e',n_iter=no_of_its),
    'Leader':hmm.MultinomialHMM(n_components = 5,init_params='e',n_iter=no_of_its),
    'Please Give Me Your Pen':hmm.MultinomialHMM(n_components = 5,init_params='e',n_iter=no_of_its),
    'Strike':hmm.MultinomialHMM(n_components = 3,init_params='e',n_iter=no_of_its),
    'That is Good':hmm.MultinomialHMM(n_components = 3,init_params='e',n_iter=no_of_its),
    'Towards':hmm.MultinomialHMM(n_components = 3,init_params='e',n_iter=no_of_its)
}

Models['Good Afternoon'].startprob_ = np.array([1,0,0])
Models['Good Afternoon'].transmat_ = np.array([[0.5, 0.5, 0.0],
                           [0.0, 0.5, 0.5],
                           [0.0, 0.0, 1.0]])
#           0       1       2   3       4           5       6           7           8           9               10      11          12
#           Up,    Right, Left,  Down,  Thumbs_Up, SunUp, Cup_Open, Cup_Closed, Apple_Finger, OpenPalmHori, Leader_L, Fist,   That_Is_Good_Circle
# ThumbsUp  0.05,  0.02,  0.02,  0.02,  0.6,       0.0625,0.029,    0.07,       0.029,        0.029,        0.029,    0.029,  0.029
# Up        0.6,   0.08,  0.08,  0.01,  0.06,      0.06,  0.0157,   0.0157,     0.0157,       0.0157,       0.0157,   0.0157, 0.0157
# Sun_Up    0.0275,0.0275,0.0275,0.0275,0.1,       0.6,   0.0271,   0.0271,     0.0271,       0.0271,       0.0271,   0.0271, 0.0271

Models['Good Afternoon'].emissionprob_ = np.array([[0.05,  0.02,  0.02,  0.02,  0.6,       0.0625,0.029,    0.07,       0.029,        0.029,        0.029,    0.029,  0.029],
                                [0.6,   0.08,  0.08,  0.01,  0.06,      0.06,  0.0157,   0.0157,     0.0157,       0.0157,       0.0157,   0.0157, 0.0157],
                                [0.0275,0.0275,0.0275,0.0275,0.1,       0.6,   0.0271,   0.0271,     0.0271,       0.0271,       0.0271,   0.0271, 0.0271]])





Models['Good Night'].startprob_ = np.array([1,0,0,0,0])
Models['Good Night'].transmat_ = np.array([[0.5, 0.5, 0.0, 0.0, 0.0],
                           [0.0, 0.5, 0.5, 0.0, 0.0],
                           [0.0, 0.0, 0.5, 0.5, 0.0],
                           [0.0, 0.0, 0.0, 0.5, 0.5],
                           [0.0, 0.0, 0.0, 0.0, 1.0]])
#             Up,    Right, Left,  Down,  Thumbs_Up, SunUp, Cup_Open, Cup_Closed, Apple_Finger, OpenPalmHori, Leader_L, Fist,   That_Is_Good_Circle
# ThumbsUp    0.05,  0.02,  0.02,  0.02,  0.6,       0.0625,0.029,    0.07,       0.029,        0.029,        0.029,    0.029,  0.029
# Up          0.6,  0.08,   0.08,  0.01,  0.06,      0.06,  0.0157,   0.0157,     0.0157,       0.0157,       0.0157,   0.0157, 0.0157
# Cup_Open    0.05, 0.005,  0.005, 0.05,  0.0257,    0.11,  0.6,      0.0257,     0.0257,       0.0257,       0.0257,   0.0257, 0.0257
# Down        0.01, 0.08,   0.08,  0.6,   0.0157,    0.0157,0.06,     0.06,       0.0157,       0.0157,       0.0157,   0.0157, 0.0157
# Cup_Closed  0.02, 0.02,   0.02,  0.05,  0.11,      0.0257,0.0257,   0.6,        0.0257,       0.0257,       0.0257,   0.0257, 0.0257

Models['Good Night'].emissionprob_ = np.array([[0.05,  0.02,  0.02,  0.02,  0.6,       0.0625,0.029,    0.07,       0.029,        0.029,        0.029,    0.029,  0.029],
                                [0.6,  0.08,   0.08,  0.01,  0.06,      0.06,  0.0157,   0.0157,     0.0157,       0.0157,       0.0157,   0.0157, 0.0157],
                                [0.05, 0.005,  0.005, 0.05,  0.0257,    0.11,  0.6,      0.0257,     0.0257,       0.0257,       0.0257,   0.0257, 0.0257],
                                [0.01, 0.08,   0.08,  0.6,   0.0157,    0.0157,0.06,     0.06,       0.0157,       0.0157,       0.0157,   0.0157, 0.0157],
                                [0.02, 0.02,   0.02,  0.05,  0.11,      0.0257,0.0257,   0.6,        0.0257,       0.0257,       0.0257,   0.0257, 0.0257]])





Models['Good Morning'].startprob_ = np.array([1,0,0,0,0])
Models['Good Morning'].transmat_ = np.array([[0.5, 0.5, 0.0, 0.0, 0.0],
                           [0.0, 0.5, 0.5, 0.0, 0.0],
                           [0.0, 0.0, 0.5, 0.5, 0.0],
                           [0.0, 0.0, 0.0, 0.5, 0.5],
                           [0.0, 0.0, 0.0, 0.0, 1.0]])
#             Up,    Right, Left,  Down,  Thumbs_Up, SunUp, Cup_Open, Cup_Closed, Apple_Finger, OpenPalmHori, Leader_L, Fist,   That_Is_Good_Circle
# Thumbs_Up   0.02,  0.02,  0.02,  0.05,  0.6,       0.0262,  0.0262, 0.07,       0.0262,       0.0262,       0.0262,   0.0262, 0.0262
# Down        0.01,0.08,   0.08,  0.6,    0.06,      0.01375, 0.01375,0.06,       0.01375,      0.01375,      0.01375,  0.01375,0.01375
# Cup_Closed  0.05,0.005,  0.005, 0.05,   0.07,      0.0262,  0.0262, 0.6,        0.0262,       0.0262,       0.0262,   0.0262, 0.0262
# Up          0.6, 0.08,   0.08,  0.01,   0.01375,   0.01375, 0.06,   0.06,       0.01375,      0.01375,      0.01375,  0.01375,0.01375
# Cup_Open    0.05,0.02,   0.02,  0.02,   0.0257,    0.11,    0.6,    0.0257,     0.0257,       0.0257,       0.0257,   0.0257, 0.0257

Models['Good Morning'].emissionprob_ = np.array([[0.02,  0.02,  0.02,  0.05,  0.6,       0.0262,  0.0262, 0.07,       0.0262,       0.0262,       0.0262,   0.0262, 0.0262],
                                [0.01,0.08,   0.08,  0.6,    0.06,      0.01375, 0.01375,0.06,       0.01375,      0.01375,      0.01375,  0.01375,0.01375],
                                [0.05,0.005,  0.005, 0.05,   0.07,      0.0262,  0.0262, 0.6,        0.0262,       0.0262,       0.0262,   0.0262, 0.0262],
                                [0.6, 0.08,   0.08,  0.01,   0.01375,   0.01375, 0.06,   0.06,       0.01375,      0.01375,      0.01375,  0.01375,0.01375],
                                [0.05,0.02,   0.02,  0.02,   0.0257,    0.11,    0.6,    0.0257,     0.0257,       0.0257,       0.0257,   0.0257, 0.0257]])






Models['After'].startprob_ = np.array([1,0,0])
Models['After'].transmat_ = np.array([[0.5, 0.5, 0.0],
                           [0.0, 0.5, 0.5],
                           [0.0, 0.0, 1.0]])
#              Up,    Right, Left,  Down,  Thumbs_Up, SunUp, Cup_Open, Cup_Closed, Apple_Finger, OpenPalmHori, Leader_L, Fist,   That_Is_Good_Circle
# OpenPalmHori 0.05,  0.02,  0.02,  0.05,  0.02,      0.02,  0.02,     0.02,       0.02,         0.7,         0.04,     0.02,   0.02
# Up/Down      0.3,   0.05,  0.05,  0.3,   0.03,      0.03,  0.03,     0.03,       0.03,         0.03,        0.03,     0.03,   0.03
# OpenPalmHori 0.05,  0.02,  0.02,  0.05,  0.02,      0.02,  0.02,     0.02,       0.02,         0.7,         0.04,     0.02,   0.02

Models['After'].emissionprob_ = np.array([[0.05,  0.02,  0.02,  0.05,  0.02,      0.02,  0.02,     0.02,       0.02,         0.7,         0.04,     0.02,   0.02],
                                [0.3,   0.05,  0.05,  0.3,   0.03,      0.03,  0.03,     0.03,       0.03,         0.03,        0.03,     0.03,   0.03],
                                [0.05,  0.02,  0.02,  0.05,  0.02,      0.02,  0.02,     0.02,       0.02,         0.7,         0.04,     0.02,   0.02]])







Models['All The Best'].startprob_ = np.array([1,0])
Models['All The Best'].transmat_ = np.array([[0.5, 0.5],
                           [0.0, 1.0]])
#             Up,    Right, Left,  Down,  Thumbs_Up, SunUp, Cup_Open, Cup_Closed, Apple_Finger, OpenPalmHori, Leader_L, Fist,   That_Is_Good_Circle
# Thumbs_Up   0.025, 0.025, 0.025, 0.025,  0.75,     0.011, 0.011,    0.061,      0.011,        0.011,        0.011,            0.011 
# Any         0.1,   0.1,   0.1,   0.1,    0.5,      0.011, 0.011,    0.061,      0.011,        0.011,        0.011,            0.011

Models['All The Best'].emissionprob_ = np.array([[0.025, 0.025, 0.025, 0.025,  0.75,     0.011, 0.011,    0.061,      0.011,        0.011,        0.011,            0.011 ],
                                [0.1,   0.1,   0.1,   0.1,    0.5,      0.011, 0.011,    0.061,      0.011,        0.011,        0.011,            0.011]])









Models['Apple'].startprob_ = np.array([1,0,0])
Models['Apple'].transmat_ = np.array([[0.5, 0.5, 0.0],
                           [0.0, 0.5, 0.5],
                           [0.0, 0.0, 1.0]])
#             Up,    Right, Left,  Down,  Thumbs_Up, SunUp, Cup_Open, Cup_Closed, Apple_Finger, OpenPalmHori, Leader_L, Fist,   That_Is_Good_Circle
# Apple_Finger0.05,  0.02,  0.02,  0.05,  0.02,      0.02,  0.02,     0.02,       0.7,          0.02,         0.04,     0.02,   0.02
# Up/Down     0.3,   0.05,  0.05,  0.3,   0.03,      0.03,  0.03,     0.03,       0.03,         0.03,         0.03,     0.03,   0.03
# Apple_Finger0.05,  0.02,  0.02,  0.05,  0.02,      0.02,  0.02,     0.02,       0.7,          0.02,         0.04,     0.02,   0.02

Models['Apple'].emissionprob_ = np.array([[0.05,  0.02,  0.02,  0.05,  0.02,      0.02,  0.02,     0.02,       0.7,          0.02,         0.04,     0.02,   0.02],
                                [0.3,   0.05,  0.05,  0.3,   0.03,      0.03,  0.03,     0.03,       0.03,         0.03,         0.03,     0.03,   0.03],
                                [0.05,  0.02,  0.02,  0.05,  0.02,      0.02,  0.02,     0.02,       0.7,          0.02,         0.04,     0.02,   0.02]])









Models['I Am Sorry'].startprob_ = np.array([1,0,0])
Models['I Am Sorry'].transmat_ = np.array([[0.5, 0.5, 0.0],
                           [0.0, 0.5, 0.5],
                           [0.0, 0.0, 1.0]])
#             Up,    Right, Left,  Down,  Thumbs_Up, SunUp, Cup_Open, Cup_Closed, Apple_Finger, OpenPalmHori, Leader_L, Fist,   That_Is_Good_Circle
# Fist        0.05,  0.02,  0.02,  0.05,  0.02,      0.02,  0.02,     0.02,       0.02,         0.02,         0.04,     0.7,    0.02
# UDLR        0.175, 0.175, 0.175, 0.175, 0.03,      0.03,  0.03,     0.03,       0.03,         0.03,         0.03,     0.03,   0.03
# Fist        0.05,  0.02,  0.02,  0.05,  0.02,      0.02,  0.02,     0.02,       0.02,         0.02,         0.04,     0.7,    0.02

Models['I Am Sorry'].emissionprob_ = np.array([[0.05,  0.02,  0.02,  0.05,  0.02,      0.02,  0.02,     0.02,       0.02,         0.02,         0.04,     0.7,    0.02],
                                [0.175, 0.175, 0.175, 0.175, 0.03,      0.03,  0.03,     0.03,       0.03,         0.03,         0.03,     0.03,   0.03],
                                [0.05,  0.02,  0.02,  0.05,  0.02,      0.02,  0.02,     0.02,       0.02,         0.02,         0.04,     0.7,    0.02]])





Models['Leader'].startprob_ = np.array([1,0,0,0,0])
Models['Leader'].transmat_ = np.array([[0.5, 0.5, 0.0, 0.0, 0.0],
                           [0.0, 0.5, 0.5, 0.0, 0.0],
                           [0.0, 0.0, 0.5, 0.5, 0.0],
                           [0.0, 0.0, 0.0, 0.5, 0.5],
                           [0.0, 0.0, 0.0, 0.0, 1.0]])
#             Up,    Right, Left,  Down,  Thumbs_Up, SunUp, Cup_Open, Cup_Closed, Apple_Finger, OpenPalmHori, Leader_L, Fist,   That_Is_Good_Circle
# Leader_L    0.02,  0.02,  0.02,  0.05,  0.03625,   0.03625,0.03625, 0.03625,    0.03625,      0.03625,      0.6,      0.03625,0.03625
# Down        0.01, 0.08,   0.08,  0.7,   0.028,     0.014,  0.014,   0.014,      0.014,        0.014,        0.028,    0.014,  0.014
# ThumbsUp    0.035,  0.02,  0.02, 0.035,  0.6,       0.0625,0.029,    0.07,       0.029,        0.029,        0.029,    0.029,  0.029
# Up          0.7, 0.08,   0.08,  0.01,   0.028,     0.014,  0.014,   0.014,      0.014,        0.014,        0.028,    0.014,  0.014
# ThumbsUp    0.05,  0.02,  0.02,  0.02,  0.6,       0.0625,0.029,    0.07,       0.029,        0.029,        0.029,    0.029,  0.029

Models['Leader'].emissionprob_ = np.array([[0.02,  0.02,  0.02,  0.05,  0.03625,   0.03625,0.03625, 0.03625,    0.03625,      0.03625,      0.6,      0.03625,0.03625],
                                [0.01, 0.08,   0.08,  0.7,   0.028,     0.014,  0.014,   0.014,      0.014,        0.014,        0.028,    0.014,  0.014],
                                [0.035,  0.02,  0.02, 0.035,  0.6,       0.0625,0.029,    0.07,       0.029,        0.029,        0.029,    0.029,  0.029],
                                [0.7, 0.08,   0.08,  0.01,   0.028,     0.014,  0.014,   0.014,      0.014,        0.014,        0.028,    0.014,  0.014],
                                [0.05,  0.02,  0.02,  0.02,  0.6,       0.0625,0.029,    0.07,       0.029,        0.029,        0.029,    0.029,  0.029]])





Models['Please Give Me Your Pen'].startprob_ = np.array([1,0,0,0,0])
Models['Please Give Me Your Pen'].transmat_ = np.array([[0.5, 0.5, 0.0, 0.0, 0.0],
                           [0.0, 0.5, 0.5, 0.0, 0.0],
                           [0.0, 0.0, 0.5, 0.5, 0.0],
                           [0.0, 0.0, 0.0, 0.5, 0.5],
                           [0.0, 0.0, 0.0, 0.0, 1.0]])
#             Up,    Right, Left,  Down,  Thumbs_Up, SunUp, Cup_Open, Cup_Closed, Apple_Finger, OpenPalmHori, Leader_L, Fist,   That_Is_Good_Circle
# Cup_Closed  0.05,0.005,  0.005, 0.05,   0.07,      0.0262,  0.0262, 0.6,        0.0262,       0.0262,       0.0262,   0.0262, 0.0262
# Up          0.7,  0.08,   0.08,  0.01,   0.028,     0.014,  0.014,   0.028,      0.014,        0.014,        0.014,    0.014,  0.014
# Thumbs_Up   0.035,  0.02,  0.02, 0.035,  0.6,       0.0625,0.029,    0.07,       0.029,        0.029,        0.029,    0.029,  0.029
# Down        0.01, 0.08,   0.08,  0.7,   0.028,     0.014,  0.014,   0.028,      0.014,        0.014,        0.014,    0.014,  0.014
# Cup_Closed  0.05,0.005,  0.005, 0.05,   0.07,      0.0262,  0.0262, 0.6,        0.0262,       0.0262,       0.0262,   0.0262, 0.0262

Models['Please Give Me Your Pen'].emissionprob_ = np.array([[0.05,0.005,  0.005, 0.05,   0.07,      0.0262,  0.0262, 0.6,        0.0262,       0.0262,       0.0262,   0.0262, 0.0262],
                                [0.7,  0.08,   0.08,  0.01,   0.028,     0.014,  0.014,   0.028,      0.014,        0.014,        0.014,    0.014,  0.014],
                                [0.035,  0.02,  0.02, 0.035,  0.6,       0.0625,0.029,    0.07,       0.029,        0.029,        0.029,    0.029,  0.029],
                                [0.01,0.08,   0.08,  0.7,   0.005,     0.005, 0.06,     0.06],
                                [0.02,0.02,   0.02,  0.05,  0.11,      0.04,  0.04,     0.7]])





Models['Strike'].startprob_ = np.array([1,0,0])
Models['Strike'].transmat_ = np.array([[0.5, 0.5, 0.0],
                           [0.0, 0.5, 0.5],
                           [0.0, 0.0, 1.0]])
#             Up,    Right, Left,  Down,  Thumbs_Up, SunUp, Cup_Open, Cup_Closed, Apple_Finger, OpenPalmHori, Leader_L, Fist,   That_Is_Good_Circle
# Fist        0.05,  0.05,  0.02,  0.02,  0.02,      0.02,  0.02,     0.02,       0.02,         0.02,         0.04,     0.7,    0.02
# UR          0.3,   0.3,   0.05,  0.05,  0.03,      0.03,  0.03,     0.03,       0.03,         0.03,         0.03,     0.03,   0.03
# Fist        0.05,  0.05,  0.02,  0.02,  0.02,      0.02,  0.02,     0.02,       0.02,         0.02,         0.04,     0.7,    0.02

Models['Strike'].emissionprob_ = np.array([[0.05,  0.05,  0.02,  0.02,  0.02,      0.01,  0.02,     0.02,       0.02,         0.02,         0.04,     0.7,    0.01],
                                [0.3,   0.3,   0.05,  0.05,  0.03,      0.03,  0.03,     0.03,       0.03,         0.03,         0.03,     0.06,   0.03],
                                [0.05,  0.05,  0.02,  0.02,  0.02,      0.02,  0.02,     0.02,       0.02,         0.01,         0.04,     0.7,    0.01]])







Models['That is Good'].startprob_ = np.array([1,0,0])
Models['That is Good'].transmat_ = np.array([[0.5, 0.5, 0.0],
                           [0.0, 0.5, 0.5],
                           [0.0, 0.0, 1.0]])
#                        Up,    Right, Left,  Down,  Thumbs_Up, SunUp, Cup_Open, Cup_Closed, Apple_Finger, OpenPalmHori, Leader_L, Fist,   That_Is_Good_Circle
# Fist                   0.08,  0.02,  0.02,  0.02,  0.02,      0.02,  0.02,     0.02,       0.02,         0.02,         0.04,     0.7,    0.02
# Up                     0.55,  0.15,  0.15,  0.15,  0.03,      0.03,  0.03,     0.03,       0.03,         0.03,         0.03,     0.03,   0.03
# That_Is_Good_Circle    0.08,  0.02,  0.02,  0.02,  0.02,      0.02,  0.02,     0.02,       0.02,         0.02,         0.02,     0.04,    0.7

Models['That is Good'].emissionprob_ = np.array([[0.08,  0.02,  0.02,  0.02,  0.02,      0.02,  0.02,     0.02,       0.02,         0.02,         0.04,     0.7,    0.02],
                                [0.55,  0.15,  0.15,  0.15,  0.03,      0.03,  0.03,     0.03,       0.03,         0.03,         0.03,     0.03,   0.03],
                                [0.08,  0.02,  0.02,  0.02,  0.02,      0.02,  0.02,     0.02,       0.02,         0.02,         0.02,     0.04,    0.7]])







Models['Towards'].startprob_ = np.array([1,0,0])
Models['Towards'].transmat_ = np.array([[0.5, 0.5, 0.0],
                           [0.0, 0.5, 0.5],
                           [0.0, 0.0, 1.0]])
#              Up,    Right, Left,  Down,  Thumbs_Up, SunUp, Cup_Open, Cup_Closed, Apple_Finger, OpenPalmHori, Leader_L, Fist,   That_Is_Good_Circle
# OpenPalmHori 0.05,  0.02,  0.05,  0.02,  0.02,      0.02,  0.02,     0.02,       0.04,         0.7,          0.04,     0.02,    0.02
# UL           0.3,   0.05,   0.3,  0.05,  0.03,      0.03,  0.03,     0.03,       0.03,         0.03,         0.03,     0.03,   0.03
# OpenPalmHori 0.05,  0.02,  0.05,  0.02,  0.02,      0.02,  0.02,     0.02,       0.04,         0.7,          0.04,     0.02,    0.02

Models['Towards'].emissionprob_ = np.array([[0.05,  0.02,  0.05,  0.02,  0.02,      0.02,  0.02,     0.02,       0.04,         0.7,          0.04,     0.02,    0.02],
                                [0.3,   0.05,   0.3,  0.05,  0.03,      0.03,  0.03,     0.03,       0.03,         0.03,         0.03,     0.03,   0.03],
                                [0.05,  0.02,  0.05,  0.02,  0.02,      0.02,  0.02,     0.02,       0.04,         0.7,          0.04,     0.02,    0.02]])














# train1 = np.array([[4],[4],[4],[4],[4],[0],[0],[0],[0],[0],[0],[0],[0],[0],[5],[5],[5],[5],[5],[5],[5],[5]])
# train2 = np.array([[4],[4],[4],[0],[4],[0],[0],[0],[0],[1],[0],[0],[2],[0],[0],[5],[5],[4],[5],[5],[4],[5],[5],[5],[5]])
# train3 = np.array([[4],[4],[4],[4],[1],[0],[0],[0],[0],[2],[0],[0],[0],[0],[5],[5],[5],[6],[5],[5],[5],[5]])
# train4 = np.array([[4],[4],[4],[0],[4],[0],[0],[0],[0],[0],[0],[0],[5],[0],[0],[5],[5],[0],[5],[5],[4],[5],[5],[5],[5]])
# train5 = np.array([[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[0],[0],[0],[0],[0],[0],[0],[0],[0],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5]])
# train6 = np.array([[4],[4],[4],[4],[4],[7],[7],[4],[4],[4],[4],[7],[4],[7],[4],[0],[0],[0],[0],[0],[0],[0],[0],[0],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5]])
# train7 = np.array([[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5]])
# train8 = np.array([[4],[4],[5],[0],[4],[0],[0],[0],[0],[1],[3],[0],[2],[0],[0],[5],[5],[4],[5],[5],[4],[5],[5],[5],[5]])
# train9 = np.array([[0],[0],[0],[0],[4],[4],[4],[0],[0],[0],[0],[0],[2],[0],[0],[0],[0],[5],[5],[5],[6],[5],[5],[5],[5]])
# trainData = np.concatenate([train1,train2,train3,train4,train5,train6,train7,train8,train9])
# lengths = [len(train1),len(train2),len(train3),len(train4),len(train5),len(train6),len(train7),len(train8),len(train9)]

GATrain1 = np.array([[4],[4],[7],[4],[4],[0],[0],[0],[0],[2],[0],[0],[0],[0],[1],[0],[0],[3],[0],[0],[5],[5],[5],[5],[5],[6],[5],[5],[5],[5],[5],[5]])
GATrain2 = np.array([[4], [0], [7], [4], [4], [4], [4], [8], [0], [0], [0], [0], [0], [0], [0], [5], [7], [6], [5], [5], [5], [5], [9], [5], [5], [5], [5], [10], [5], [5]])
GATrain3 = np.array([[4], [0], [7], [4], [12], [4], [4], [4], [0], [4], [2], [0], [0], [5], [5], [11], [5], [5], [6], [7]])

GMTrain1 = np.array([[4],[4],[4],[4],[4],[0],[4],[0],[4],[3],[3],[3],[3],[1],[3],[3],[3],[2],[3],[3],[7],[4],[7],[7],[7],[4],[7],[7],[7],[7],[7],[0],[0],[0],[0],[0],[0],[1],[0],[0],[0],[0],[0],[0],[2],[0],[6],[6],[6],[5],[6],[6],[8],[6],[6],[6],[5],[6],[6],[6]])
GMTrain2 = np.array([[4], [0], [7], [4], [12], [4], [4], [4], [3], [4], [3], [3], [3], [3], [3], [3], [3], [7], [4], [7], [7], [7], [7], [4], [7], [7], [7], [7], [0], [4], [0], [0], [11], [0], [0], [0], [0], [0], [6], [7], [6], [6], [9], [6], [7], [10], [6], [6], [7]])

AfterTrain1 = np.array([[9],[9],[9],[9],[9],[9],[9],[0],[0],[0],[0],[3],[3],[3],[3],[3],[3],[9],[9],[9],[9],[9],[9],[9]])
AfterTrain2 = np.array([[9],[9],[8],[9],[9],[9],[9],[7],[9],[9],[9],[0],[0],[0],[0],[3],[3],[2],[3],[3],[3],[9],[9],[9],[6],[9],[9],[5]])
AfterTrain3 = np.array([[9],[9],[12],[9],[9],[9],[9],[4],[9],[9],[9],[0],[0],[0],[0],[3],[3],[3],[3],[3],[3],[3],[9],[9],[9],[11],[9],[9],[10]])
AfterTrain4 = np.array([[9],[9],[9],[9],[9],[9],[9],[0],[1],[0],[0],[0],[0],[3],[3],[3],[3],[2],[3],[9],[9],[9],[9],[9],[9],[9]])

ATBTrain1 = np.array([[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4]])
ATBTrain2 = np.array([[4],[4],[4]])
ATBTrain3 = np.array([[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[5],[4],[6],[4],[3],[3]])
ATBTrain4 = np.array([[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[7],[4],[8],[4]])
ATBTrain5 = np.array([[4],[4],[4],[9],[4],[4],[10],[4],[4],[4],[4],[4],[4],[4],[4],[4]])
ATBTrain6 = np.array([[4],[11],[4],[4],[4],[4],[12],[4],[4],[4],[4],[4],[4],[4],[4],[4],[3]])
ATBTrain7 = np.array([[0],[4],[4],[4],[4],[4],[1],[4],[4],[4],[4],[4],[4],[4],[4],[4],[3]])
ATBTrain8 = np.array([[0],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[2],[4],[4],[3],[4],[3]])

AppleTrain1 = np.array([[8],[8],[8],[8],[8],[8],[8],[8],[3],[3],[3],[3],[3],[3],[0],[0],[0],[0],[0],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8]])
AppleTrain2 = np.array([[9],[8],[8],[8],[8],[8],[1],[8],[3],[3],[3],[3],[3],[3],[0],[0],[0],[0],[0],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[10],[8]])
AppleTrain3 = np.array([[8],[12],[6],[8],[8],[8],[8],[8],[3],[1],[3],[3],[1],[3],[0],[0],[2],[0],[0],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8]])
AppleTrain4 = np.array([[8],[8],[8],[5],[8],[9],[11],[8],[3],[3],[3],[3],[3],[3],[0],[0],[0],[0],[0],[8],[8],[7],[8],[8],[8],[12],[8],[8],[8],[4],[8]])

IMSTrain1 = np.array([[11],[11],[11],[11],[11],[11],[2],[2],[2],[3],[3],[3],[1],[1],[1],[0],[0],[0],[0],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11]])
IMSTrain2 = np.array([[12],[11],[11],[11],[11],[11],[2],[2],[2],[3],[3],[3],[1],[1],[1],[0],[0],[0],[0],[11],[11],[11],[11],[11],[11],[11],[10],[11],[11],[11],[11],[9]])
IMSTrain3 = np.array([[11],[11],[11],[11],[11],[11],[2],[2],[2],[3],[3],[3],[1],[1],[1],[0],[0],[0],[0],[11],[11],[11],[11],[11],[11],[11],[8],[11],[11],[11],[7],[11]])
IMSTrain4 = np.array([[11],[11],[11],[6],[11],[11],[2],[2],[2],[3],[3],[3],[1],[1],[1],[0],[0],[0],[0],[11],[11],[11],[11],[5],[11],[11],[11],[4],[11],[11],[11],[11]])

LeaderTrain1 = np.array([[10],[10],[10],[10],[10],[10],[3],[3],[3],[3],[4],[4],[4],[4],[4],[4],[4],[0],[0],[0],[0],[0],[0],[0],[0],[0],[4],[4],[4],[4],[4],[4],[4]])
LeaderTrain2 = np.array([[10],[10],[10],[10],[11],[10],[3],[3],[3],[3],[3],[3],[4],[4],[4],[4],[4],[4],[4],[0],[1],[0],[0],[0],[0],[0],[0],[0],[4],[4],[4],[5],[4],[4],[4]])
LeaderTrain3 = np.array([[10],[10],[12],[10],[10],[10],[3],[3],[3],[3],[3],[3],[4],[4],[4],[4],[4],[4],[4],[0],[0],[0],[0],[0],[0],[0],[0],[0],[4],[4],[4],[4],[4],[4],[4]])
LeaderTrain4 = np.array([[10],[10],[10],[10],[10],[10],[3],[3],[3],[3],[3],[3],[4],[4],[4],[4],[4],[4],[4],[0],[0],[0],[0],[0],[0],[0],[0],[0],[4],[4],[7],[4],[4],[4],[4]])
LeaderTrain5 = np.array([[9],[10],[10],[10],[10],[10],[3],[3],[3],[3],[3],[3],[4],[4],[4],[4],[4],[4],[4],[0],[0],[0],[0],[0],[0],[0],[0],[0],[4],[4],[4],[4],[4],[6],[4]])
LeaderTrain6 = np.array([[10],[10],[10],[10],[8],[10],[3],[3],[3],[3],[3],[3],[4],[4],[4],[4],[4],[4],[4],[0],[0],[0],[2],[0],[0],[0],[0],[0],[4],[4],[4],[4],[4],[4],[4]])

PGMYPTrain1 = np.array([[7],[7],[7],[7],[7],[7],[0],[0],[0],[0],[0],[0],[4],[4],[4],[4],[4],[3],[3],[3],[3],[3],[7],[7],[7],[7],[7],[7]])
PGMYPTrain2 = np.array([[7],[7],[8],[7],[7],[7],[0],[0],[0],[0],[0],[0],[4],[4],[4],[4],[4],[3],[3],[3],[3],[3],[7],[7],[7],[7],[7],[7]])
PGMYPTrain3 = np.array([[7],[7],[7],[7],[7],[10],[0],[0],[0],[0],[0],[0],[4],[6],[4],[4],[4],[3],[3],[3],[3],[3],[7],[7],[7],[7],[5],[7]])
PGMYPTrain4 = np.array([[7],[7],[7],[9],[7],[7],[0],[0],[0],[0],[0],[0],[4],[4],[4],[4],[4],[3],[3],[3],[3],[3],[7],[7],[7],[11],[7],[7]])
PGMYPTrain5 = np.array([[7],[7],[7],[7],[7],[7],[0],[0],[1],[0],[0],[0],[4],[4],[4],[4],[4],[3],[2],[3],[3],[3],[7],[12],[7],[7],[7],[7]])

STrain1 = np.array([[11],[11],[11],[11],[11],[11],[11],[0],[0],[1],[1],[0],[0],[1],[1],[0],[0],[1],[1],[11],[11],[11],[11],[11]])
STrain2 = np.array([[11],[11],[11],[9],[11],[11],[11],[0],[0],[1],[1],[0],[0],[1],[1],[0],[0],[1],[1],[11],[11],[11],[6],[11]])
STrain3 = np.array([[11],[12],[11],[11],[11],[11],[4],[0],[0],[1],[3],[0],[3],[1],[1],[0],[0],[1],[1],[5],[11],[11],[9],[4]])
STrain4 = np.array([[11],[11],[10],[11],[11],[11],[11],[0],[0],[1],[1],[0],[0],[1],[1],[0],[0],[1],[1],[11],[11],[11],[11],[11]])
STrain5 = np.array([[11],[2],[11],[11],[8],[11],[8],[0],[0],[1],[1],[0],[0],[1],[1],[2],[0],[1],[1],[7],[11],[11],[11],[11]])
STrain6 = np.array([[11],[7],[11],[11],[11],[12],[11],[0],[0],[0],[0],[0],[0],[1],[1],[11],[11],[11],[11],[11]])
STrain7 = np.array([[11],[11],[11],[11],[6],[11],[11],[0],[0],[1],[1],[1],[1],[1],[1],[0],[0],[1],[1],[10],[11],[11],[11],[11]])
STrain8 = np.array([[11],[11],[11],[5],[11],[11],[11],[0],[0],[2],[0],[0],[0],[0],[0],[2],[0],[0],[0],[11],[11],[3],[11],[11]])


TIGTrain1 = np.array([[11],[11],[11],[11],[11],[11],[0],[0],[0],[0],[0],[0],[12],[12],[12],[12],[12],[12]])
TIGTrain2 = np.array([[11],[11],[11],[11],[11],[11],[11],[11],[11],[0],[0],[0],[0],[0],[0],[0],[0],[0],[12],[12],[12],[12],[12],[12],[12],[12],[12]])
TIGTrain3 = np.array([[11],[11],[12],[11],[11],[11],[11],[11],[11],[1],[0],[0],[0],[0],[0],[0],[0],[0],[12],[12],[12],[12],[12],[12],[12],[12],[12]])
TIGTrain4 = np.array([[11],[11],[11],[11],[11],[11],[11],[4],[11],[0],[0],[0],[0],[3],[0],[0],[0],[0],[12],[12],[12],[12],[12],[12],[12],[12],[12]])
TIGTrain5 = np.array([[11],[11],[11],[11],[10],[11],[11],[11],[11],[0],[0],[0],[0],[0],[0],[0],[0],[0],[12],[12],[12],[12],[9],[12],[12],[12],[12]])
TIGTrain6 = np.array([[11],[11],[5],[11],[11],[11],[11],[11],[11],[0],[0],[0],[0],[0],[2],[0],[0],[0],[12],[12],[12],[8],[12],[12],[12],[12],[12]])
TIGTrain7 = np.array([[11],[11],[11],[11],[11],[6],[11],[11],[11],[0],[0],[0],[0],[0],[0],[0],[0],[0],[12],[12],[12],[12],[12],[7],[12],[12],[12]])

TowardsTrain1 = np.array([[9],[9],[9],[9],[9],[9],[9],[0],[0],[2],[2],[2],[0],[0],[2],[2],[2],[9],[9],[9],[9],[9],[9],[9],[9]])
TowardsTrain2 = np.array([[9],[9],[10],[9],[9],[9],[9],[0],[0],[2],[2],[2],[3],[0],[2],[2],[2],[9],[9],[8],[9],[9],[9],[9],[9]])
TowardsTrain3 = np.array([[9],[9],[9],[9],[9],[12],[9],[0],[0],[2],[2],[2],[0],[0],[2],[2],[2],[9],[9],[9],[9],[7],[9],[9],[9]])
TowardsTrain4 = np.array([[9],[9],[9],[11],[9],[9],[9],[0],[0],[2],[2],[2],[0],[0],[2],[2],[2],[9],[9],[9],[9],[6],[9],[9],[9]])
TowardsTrain5 = np.array([[4],[9],[9],[9],[9],[9],[9],[0],[0],[2],[2],[2],[1],[0],[2],[2],[2],[9],[5],[9],[9],[9],[9],[9],[9]])
TowardsTrain6 = np.array([[9],[9],[9],[9],[9],[9],[9],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[2],[2],[9],[9],[9],[9],[9],[9],[9],[9]])
TowardsTrain7 = np.array([[9],[9],[9],[9],[9],[9],[9],[0],[0],[2],[2],[2],[2],[2],[2],[2],[2],[2],[9],[9],[9],[9],[9],[9],[9],[9]])



trainData = {
    'Good Afternoon':np.concatenate([GATrain1, GATrain2, GATrain3]),
    'Good Morning':np.concatenate([GMTrain1, GMTrain2]),
    'Good Night':np.array([[4],[4],[4],[4],[4],[0],[4],[0],[4],[0],[0],[0],[0],[0],[0],[1],[8],[0],[0],[0],[0],[0],[2],[0],[6],[6],[6],[5],[6],[6],[6],[5],[6],[6],[6],[6],[9],[6],[3],[3],[3],[3],[1],[3],[3],[3],[2],[3],[3],[10],[7],[7],[4],[7],[7],[7],[11],[4],[7],[12]]),
    'After':np.concatenate([AfterTrain1, AfterTrain2, AfterTrain3, AfterTrain4]),
    'All The Best':np.concatenate([ATBTrain1, ATBTrain2, ATBTrain3, ATBTrain4, ATBTrain5,ATBTrain6, ATBTrain7,ATBTrain8]),
    'Apple':np.concatenate([AppleTrain1, AppleTrain2, AppleTrain3, AppleTrain4]),
    'I Am Sorry':np.concatenate([IMSTrain1, IMSTrain2, IMSTrain3, IMSTrain4]),
    'Leader':np.concatenate([LeaderTrain1, LeaderTrain2, LeaderTrain3, LeaderTrain4, LeaderTrain5, LeaderTrain6]),
    'Please Give Me Your Pen':np.concatenate([PGMYPTrain1, PGMYPTrain2, PGMYPTrain3, PGMYPTrain4, PGMYPTrain5]),
    'Strike':np.concatenate([STrain1, STrain2, STrain3, STrain4, STrain5, STrain6, STrain7, STrain8]),
    'That is Good':np.concatenate([TIGTrain1, TIGTrain2, TIGTrain3, TIGTrain4, TIGTrain5, TIGTrain6, TIGTrain7]),
    'Towards':np.concatenate([TowardsTrain1, TowardsTrain2, TowardsTrain3, TowardsTrain4, TowardsTrain5, TowardsTrain6, TowardsTrain7])
}

lengths ={
    'Good Afternoon':[len(GATrain1),len(GATrain2),len(GATrain3)],
    'Good Morning':[len(GMTrain1),len(GMTrain2)],
    'Good Night':[len(trainData['Good Night'])],
    'After': [len(AfterTrain1), len(AfterTrain2), len(AfterTrain3), len(AfterTrain4)],
    'All The Best': [len(ATBTrain1), len(ATBTrain2), len(ATBTrain3), len(ATBTrain4), len(ATBTrain5),len(ATBTrain6), len(ATBTrain7),len(ATBTrain8)],
    'Apple': [len(AppleTrain1), len(AppleTrain2), len(AppleTrain3), len(AppleTrain4)],
    'I Am Sorry': [len(IMSTrain1), len(IMSTrain2), len(IMSTrain3), len(IMSTrain4)],
    'Leader': [len(LeaderTrain1), len(LeaderTrain2), len(LeaderTrain3), len(LeaderTrain4), len(LeaderTrain5), len(LeaderTrain6)],
    'Please Give Me Your Pen': [len(PGMYPTrain1), len(PGMYPTrain2), len(PGMYPTrain3), len(PGMYPTrain4), len(PGMYPTrain5)],
    'Strike': [len(STrain1), len(STrain2), len(STrain3), len(STrain4), len(STrain5), len(STrain6), len(STrain7), len(STrain8)],
    'That is Good': [len(TIGTrain1), len(TIGTrain2), len(TIGTrain3), len(TIGTrain4), len(TIGTrain5), len(TIGTrain6), len(TIGTrain7)],
    'Towards': [len(TowardsTrain1), len(TowardsTrain2), len(TowardsTrain3), len(TowardsTrain4), len(TowardsTrain5), len(TowardsTrain6), len(TowardsTrain7)]
}


with open(IP_fName) as fileR:
    while True:
        line = fileR.readline()
        if line == '': break
        line = line.strip().split(',')
        class1 = line[0]
        line[1:] = map(int,line[1:])
        data = line[1:]
        trainTemp = np.reshape(np.array(data),(-1,1))
        trainData[class1] = np.concatenate([trainData[class1],trainTemp])
        lengths[class1] += [len(trainTemp)]
        
print(trainData)
print(len(trainData))
print(lengths)
        

# joblib.dump(remodel, "filename.pkl")


for key1 in Models.keys():
    print(key1)
    # if key1 == 'Apple':
    #     continue
    Models[key1].fit(trainData[key1],lengths[key1])
    print(Models[key1].startprob_)
    print(Models[key1].transmat_)
    print(Models[key1].emissionprob_)
    joblib.dump(Models[key1], OPDir+"/"+key1+"_temp.pkl")
    print("Stored model '"+key1+"_temp.pkl' to path '"+OPDir+"/'")

print()

test1 = np.array([[4],[4],[4],[4],[4],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5]])
test2 = np.array([[4],[4],[4],[4],[4],[0],[4],[0],[4],[0],[0],[0],[0],[0],[0],[0],[1],[0],[0],[2],[0],[0],[0],[0],[0],[1],[0],[0],[5],[5],[4],[5],[5],[4],[5],[5],[5],[5],[5],[5],[5],[5],[5]])
test3 = np.array([[4],[4],[4],[4],[4],[0],[4],[0],[4],[0],[0],[0],[0],[0],[0],[0],[1],[0],[6],[6],[6],[6],[6],[6],[6],[3],[3],[3],[3],[3],[3],[3],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7]])
test4 = np.array([[4],[4],[4],[4],[4],[0],[4],[0],[4],[3],[3],[3],[3],[3],[3],[3],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[0],[0],[0],[0],[0],[0],[0],[1],[0],[6],[6],[6],[6],[6],[6],[6]])

#Stroke
test5 = np.array([[11],[11],[10],[11],[11],[11],[11],[0],[0],[1],[1],[0],[0],[1],[1],[0],[0],[1],[1],[11],[11],[11],[11],[11]])

#PGMYP
test6 = np.array([[7],[7],[7],[7],[7],[7],[0],[0],[0],[0],[0],[0],[4],[4],[4],[4],[4],[3],[3],[3],[3],[3],[7],[7],[7],[7],[7],[7]])

#Leader
test7 = np.array([[10],[10],[10],[10],[11],[10],[3],[3],[3],[3],[3],[3],[4],[4],[4],[4],[4],[4],[4],[0],[1],[0],[0],[0],[0],[0],[0],[0],[4],[4],[4],[5],[4],[4],[4]])

#I am Sorry
test8 = np.array([[12],[11],[11],[11],[11],[11],[2],[2],[2],[3],[3],[3],[1],[1],[1],[0],[0],[0],[0],[11],[11],[11],[11],[11],[11],[11],[10],[11],[11],[11],[11],[9]])

for key1 in Models.keys():
    print(key1)
    start_time = timeit.default_timer()
    print('Good Afternoon',Models[key1].score(test1))
    elapsed1 = timeit.default_timer() - start_time
    start_time = timeit.default_timer()
    print('Good Afternoon',Models[key1].score(test2))
    elapsed2 = timeit.default_timer() - start_time
    start_time = timeit.default_timer()
    print('Good Night',Models[key1].score(test3))
    elapsed3 = timeit.default_timer() - start_time
    start_time = timeit.default_timer()
    print('Good Morning',Models[key1].score(test4))
    elapsed4 = timeit.default_timer() - start_time

    print('Stroke',Models[key1].score(test5,lengths=[len(test5)]))

    print('PGMYP',Models[key1].score(test6))

    print('Leader',Models[key1].score(test7))

    print('I am Sorry',Models[key1].score(test8))
    
    print("Average time taken for this model",(elapsed1+elapsed2+elapsed3+elapsed4)/4)







# print(Models['Good Night'].sample(30))

# test1 = np.array([[4],[4],[4],[4],[4],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5]])
# test2 = np.array([[4],[4],[4],[4],[4],[0],[4],[0],[4],[0],[0],[0],[0],[0],[0],[0],[1],[0],[0],[2],[0],[0],[0],[0],[0],[1],[0],[0],[5],[5],[4],[5],[5],[4],[5],[5],[5],[5],[5],[5],[5],[5],[5]])
# test3 = np.array([[4],[4],[4],[4],[4],[0],[4],[0],[4],[0],[0],[0],[0],[0],[0],[0],[1],[0],[6],[6],[6],[6],[6],[6],[6],[3],[3],[3],[3],[3],[3],[3],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7]])
# print(Models['Good Night'].score(test1))
# print(Models['Good Night'].score(test2))
# print(Models['Good Night'].score(test3))

# train1 = np.array([[4],[4],[4],[4],[4],[0],[0],[0],[0],[0],[0],[0],[0],[0],[5],[5],[5],[5],[5],[5],[5],[5]])
# train2 = np.array([[4],[4],[4],[0],[4],[0],[0],[0],[0],[1],[0],[0],[2],[0],[0],[5],[5],[4],[5],[5],[4],[5],[5],[5],[5]])
# train3 = np.array([[4],[4],[4],[4],[1],[0],[0],[0],[0],[2],[0],[0],[0],[0],[5],[5],[5],[6],[5],[5],[5],[5]])
# train4 = np.array([[4],[4],[4],[0],[4],[0],[0],[0],[0],[0],[0],[0],[5],[0],[0],[5],[5],[0],[5],[5],[4],[5],[5],[5],[5]])
# train5 = np.array([[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[0],[0],[0],[0],[0],[0],[0],[0],[0],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5]])
# train6 = np.array([[4],[4],[4],[4],[4],[7],[7],[4],[4],[4],[4],[7],[4],[7],[4],[0],[0],[0],[0],[0],[0],[0],[0],[0],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5]])
# train7 = np.array([[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5]])
# train8 = np.array([[4],[4],[5],[0],[4],[0],[0],[0],[0],[1],[3],[0],[2],[0],[0],[5],[5],[4],[5],[5],[4],[5],[5],[5],[5]])
# train9 = np.array([[0],[0],[0],[0],[4],[4],[4],[0],[0],[0],[0],[0],[2],[0],[0],[0],[0],[5],[5],[5],[6],[5],[5],[5],[5]])
# X = np.concatenate([train1,train2,train3,train4,train5,train6,train7,train8,train9])
# lengths = [len(train1),len(train2),len(train3),len(train4),len(train5),len(train6),len(train7),len(train8),len(train9)]

# Models['Good Night'].fit(X,lengths)

# # print(Models['Good Night'].monitor)
# print(Models['Good Night'].startprob_)
# print(Models['Good Night'].transmat_)
# print(Models['Good Night'].emissionprob_)

# print()

# print(Models['Good Night'].score(test1))
# print(Models['Good Night'].score(test2))
# print(Models['Good Night'].score(test3))